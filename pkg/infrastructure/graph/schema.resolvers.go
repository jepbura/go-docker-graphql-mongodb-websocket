package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/jepbura/go-server/pkg/infrastructure/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
	// err := r.userInteractor.SaveUser_Usecase(input)
	// if err != nil {
	// 	return nil, err
	// }

	// user := &model.User{
	// 	ID:   fmt.Sprintf("T%d", rand.Int()),
	// 	Name: input.Name,
	// }

	// return user, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: CreateBook - CreateBook"))
	// book := &model.Book{
	// 	ID:    fmt.Sprintf("T%d", rand.Int()),
	// 	Title: input.Title,
	// 	Author: &model.User{
	// 		ID:   input.UserID,
	// 		Name: input.Name,
	// 	},
	// }
	// mongo_controller.Save(book)
	// return book, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// panic(fmt.Errorf("not implemented: Users - users"))
	// newUsers, err := r.userInteractor.FindAllUsers_Usecase()
	// if err != nil {
	// 	return nil, err
	// }
	// fmt.Println("********************")
	// fmt.Println("newUsers is: ", newUsers)
	// fmt.Println("********************")
	users := []*model.User{
		{Name: "javad"},
		{Name: "fara"},
	}
	return users, nil
	// fmt.Println("*********************************************")
	// users, err := r.userInteractor.FindAllUsers_Usecase()
	// if err != nil {
	// 	return nil, err
	// }

	// return users, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	// panic(fmt.Errorf("not implemented: Books - Books"))
	books := []*model.Book{
		{Title: "کتاب 1", Author: &model.User{Name: "javad"}},
		{Title: "کتاب 2", Author: &model.User{Name: "fara"}},
	}
	return books, nil
	// books := mongo_controller.FindAll()
	// return books, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
