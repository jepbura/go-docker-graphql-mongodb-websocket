// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/jepbura/go-server/pkg/config"
	"github.com/jepbura/go-server/pkg/infrastructure/database/mongo"
	"github.com/jepbura/go-server/pkg/infrastructure/graph"
	"github.com/jepbura/go-server/pkg/infrastructure/logging"
	"github.com/jepbura/go-server/pkg/infrastructure/server"
	"github.com/jepbura/go-server/pkg/repository/user_repository"
	"github.com/jepbura/go-server/pkg/usecase/user_usecase"
	mongo2 "go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

// func InitializeAPP(cnf config.Env) (*http.ServerHTTP, error) {
// func InitializeAPP(cnf config.Env) (*mongodb.MongoDBHandler, error) {
func InitializeAPP(cnf config.Env) (*App, error) {
	logger, err := logging.LoggerInit(cnf)
	if err != nil {
		return nil, err
	}
	client, err := mongo.NewMongoDatabase(cnf, logger)
	if err != nil {
		return nil, err
	}
	mongoDBHandler := mongo.MongoDBHandler{
		Env:    cnf,
		Client: client,
	}
	repositoryInterface := repository.NewUserRepository(client, mongoDBHandler)
	useCaseInterface := usecase.NewUserUseCase(repositoryInterface)
	resolver := graph.Resolver{
		Usecase: useCaseInterface,
	}
	serverHTTP := server.NewServerHTTP(cnf, logger, useCaseInterface)
	app := &App{
		Resolver: resolver,
		Client:   client,
		Http:     serverHTTP,
	}
	return app, nil
}

// wire.go:

type App struct {
	Resolver graph.Resolver
	Client   *mongo2.Client
	// MongoDBHandler *mongodb.MongoDBHandler
	// Repo        *repository.UserDatabase
	// Usecase     *usecase.UserUseCase
	// UserHandler *handler.UserHandler
	Http *server.ServerHTTP
}

var dbSet = wire.NewSet(mongo.NewMongoDatabase, wire.Struct(new(mongo.MongoDBHandler), "*"), wire.Bind(new(mongo.MongoDbProvider), new(*mongo.MongoDBHandler)))

var NewUserRepository = wire.NewSet(repository.NewUserRepository)

var usecaseSet = wire.NewSet(usecase.NewUserUseCase)
