// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/jepbura/go-server/pkg/config"
	"github.com/jepbura/go-server/pkg/infrastructure/database/mongo"
	"github.com/jepbura/go-server/pkg/infrastructure/graph"
	"github.com/jepbura/go-server/pkg/infrastructure/logging"
	"github.com/jepbura/go-server/pkg/infrastructure/server"
	"github.com/jepbura/go-server/pkg/repository/user_repository"
	"github.com/jepbura/go-server/pkg/usecase/usecase_interfaces"
	"github.com/jepbura/go-server/pkg/usecase/user_usecase"
)

// Injectors from wire.go:

func InitializeAPP(cnf config.Env) (*App, error) {
	logger, err := logging.LoggerInit(cnf)
	if err != nil {
		return nil, err
	}
	mongoDBHandler, err := mongo.NewMongoDatabase(cnf, logger)
	if err != nil {
		return nil, err
	}
	repositoryInterface := userRepository.NewUserRepository(mongoDBHandler)
	userUsecaseInterface := userUsecase.NewUserUseCase(repositoryInterface)
	useCasesInterface := &usecase_interfaces.UseCasesInterface{
		UserUsecaseInterface: userUsecaseInterface,
	}
	resolver := &graph.Resolver{
		Usecase: useCasesInterface,
	}
	serverHTTP := server.NewServerHTTP(cnf, logger, useCasesInterface)
	app := &App{
		Resolver:       resolver,
		MongoDBHandler: mongoDBHandler,
		Http:           serverHTTP,
	}
	return app, nil
}

// wire.go:

type App struct {
	Resolver *graph.Resolver
	// Client         *mongo.Client
	MongoDBHandler *mongo.MongoDBHandler
	// Repo        *repository.UserDatabase
	// Usecase     *usecase.UserUseCase
	// UserHandler *handler.UserHandler
	// Usecase *usecase_interfaces.AllUseCaseInterface
	Http *server.ServerHTTP
}

var dbSet = wire.NewSet(mongo.NewMongoDatabase)

var NewUserRepository = wire.NewSet(userRepository.NewUserRepository)

var usecaseSet = wire.NewSet(userUsecase.NewUserUseCase, wire.Struct(new(usecase_interfaces.UseCasesInterface), "*"))
